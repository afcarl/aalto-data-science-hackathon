// Generated by CoffeeScript 1.9.2
(function() {
  var activePolylines, addMapLine, clearMap, createIndividualPathTrail, createPathsOnMap, displayNotification, getActivePaths, getPathJobColor, initializeGoogleMaps, map, populateMap, hackAPI;

  hackAPI = "http://dev.hel.fi/aura/v1/snowplow/data";

  activePolylines = [];

  map = null;
  heatmap = new google.maps.visualization.HeatmapLayer({
      dissipating: true,
      //gradient: ,
      //maxIntensity: ,
      opacity: 0.7,
      radius: 20
    });

  initializeGoogleMaps = function(callback, time) {
    var helsinkiCenter, mapOptions, styles;
    helsinkiCenter = new google.maps.LatLng(60.21, 24.940338);
    //helsinkiCenter = new google.maps.LatLng(60.193084, 24.940338);
    mapOptions = {
      center: helsinkiCenter,
      zoom: 12,
      disableDefaultUI: true,
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.SMALL,
        position: google.maps.ControlPosition.RIGHT_BOTTOM
      }
    };
    map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
    map.setOptions({
      styles: styles
    });
    return callback(time);
  };

  getPathColor = function(value) {

    return "#" + ("00" + Math.floor(parseInt('00',16) + value / 100 * parseInt('ff',16)).toString(16)).slice(-2) + "00ff";

//    if (value > 50) {
//      return "#84ff00";
//    } else {
//      return "#d93425";
//    }
  };

  addMapLine = function(PathData, value) {
    var PathTrailColor, polyline, polylinePath;
    PathTrailColor = getPathColor(value);
    polylinePath = _.reduce(PathData, (function(accu, x) {
      accu.push(new google.maps.LatLng(x.coords[1], x.coords[0]));
      return accu;
    }), []);
    polyline = new google.maps.Polyline({
      path: polylinePath,
      geodesic: true,
      strokeColor: PathTrailColor,
      strokeWeight: 2,
      strokeOpacity: 0.8
    });
    activePolylines.push(polyline);
    return polyline.setMap(map);
  };

  clearMap = function() {
    heatmap.set('data', null);
    return _.map(activePolylines, function(polyline) {
      return polyline.setMap(null);
    });
  };

  displayNotification = function(notificationText) {
    var $notification;
    $notification = $("#notification");
    return $notification.empty().text(notificationText).slideDown(800).delay(5000).slideUp(800);
  };

  getActivePaths = function(time, callback) {
    $("#load-spinner").fadeIn(400);
    return $.getJSON("routes.json").done(function(json) {
      if (json.length !== 0) {
        callback(time, json);
      } else {
        displayNotification("No routes to show.");
      }
      return $("#load-spinner").fadeOut(800);
    }).fail(function(error) {
      return console.error("Failed to fetch paths: " + (JSON.stringify(error)));
    });
  };

  createIndividualPathTrail = function(value, PathId, historyData) {
    $("#load-spinner").fadeIn(800);
    return $.getJSON("route-"+PathId+".json").done(function(json) {
      if (json.length !== 0) {
        _.map(json, function(onepath) {
            return addMapLine(onepath, value);
        });
        return $("#load-spinner").fadeOut(800);
      }
    }).fail(function(error) {
      return console.error("Failed to create path " + PathId + ": " + (JSON.stringify(error)));
    });
  };

  createPathsOnMap = function(time, json) {
    return _.each(json, function(x) {
      return createIndividualPathTrail(x.value, x.id, json);
    });
  };

  populateMap = function(type) {
    clearMap();
    if (type <= 4) {
      console.error("Show heat map type " + type);
      return createHeatMap(type);
    }
    else {
      // TODO: ADD ROUTE PLOTTING STUFF HERE!
      console.error("Show route map type " + type);
      //return getActivePaths(time + "hours+ago", function(time, json) {
      //  return createPathsOnMap(time, json);
      //});
    }
  };

  drawHeatMap = function(data) {

    heatmap.setData(data);
    heatmap.setMap(map);
    /*
    var heatmap = new google.maps.visualization.HeatmapLayer({
      map: map,
      data: data,
      dissipating: true,
      //gradient: ,
      //maxIntensity: ,
      opacity: 0.7,
      radius: 20
    });
//*/
  }
  //*
  createHeatMap = function(type) {

    $("#load-spinner").fadeIn(800);
    var heatMapData = [];
    // Dynamic API:
    //return $.getJSON("" + hackAPI + "?heatmap").done(function(json) {
    // Static API:
    return $.getJSON("stops.json").done(function(json) {
      if (json.length !== 0) {
        _.map(json, function(json_data) {
          for (i = 0; i < json_data.length; i++) {
            //console.error("Debug: " + JSON.stringify(json_data[i]));
            var lat = json_data[i].coords[0];
            var lng = json_data[i].coords[1];
            if (type == 1) {
              var weight = 1;
            }
            else {
              var weight = i*i*i*json_data[i].value[type-2];
            }
            heatMapData.push({location: new google.maps.LatLng(lng, lat),
                              weight: weight});
          }
        });
        drawHeatMap(heatMapData);
        return $("#load-spinner").fadeOut(800);
      }
    }).fail(function(error) {
      return console.error("Failed to create heat map: " + (JSON.stringify(error)));
    });

  };
    //*/

  $(document).ready(function() {
    var clearUI;
    clearUI = function() {
      $("#notification").stop(true, false).slideUp(200);
      return $("#load-spinner").stop(true, false).fadeOut(200);
    };
    if (localStorage["auratkartalla.userHasClosedInfo"]) {
      $("#info").addClass("off");
    }
    initializeGoogleMaps(populateMap, 1);
    $("#time-filters li").on("click", function(e) {
      e.preventDefault();
      clearUI();
      $("#time-filters li").removeClass("active");
      $(e.currentTarget).addClass("active");
      $("#visualization").removeClass("on");
      return populateMap($(e.currentTarget).data("visualization"));
    });
    $("#info-close, #info-button").on("click", function(e) {
      e.preventDefault();
      $("#info").toggleClass("off");
      return localStorage["auratkartalla.userHasClosedInfo"] = true;
    });
    return $("#visualization-close, #visualization-button").on("click", function(e) {
      e.preventDefault();
      return $("#visualization").toggleClass("on");
    });
  });


}).call(this);
